For a given N, find the number of ways to choose an integer x from the range [0,2N−1] such that x⊕(x+1)=(x+2)⊕(x+3), where ⊕ denotes the bitwise XOR operator.

Since the number of valid x can be large, output it modulo 109+7.

Input
The first line contains an integer T, the number of test cases. Then the test cases follow.
The only line of each test case contains a single integer N.

Output
For each test case, output in a single line the answer to the problem modulo 109+7.

Constraints
1≤T≤105
1≤N≤105

Subtasks
Subtask #1 (100 points): Original Constraints

Sample Input
2
1
2

Sample Output
1
2

Explanation
Test Case 1: The possible values of x are {0}.
Test Case 2: The possible values of x are {0,2}.


SOLUTION :-
/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
    static long power(long x, long y)
{
    long res = 1;     // Initialize result
    x=x%1000000007;
    y=y%1000000007;
    while (y > 0)
    {
        x=x%1000000007;
        y=y%1000000007;
        // If y is odd, multiply x with result
        if ((y & 1) != 0)
            res = (res * x)%1000000007;
  
        // y must be even now
        y = (y >> 1)%1000000007; // y = y/2
        x = (x * x)%1000000007;  // Change x to x^2
    }
    return res;
}
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Scanner s = new Scanner(System.in);
		int T=s.nextInt();
		while(T-->0){
		    int N=s.nextInt();
		    long ans=power(2,N-1);
		    ans=ans%1000000007;
		    System.out.println(ans);
		}
	}
}
